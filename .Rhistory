knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE,
echo = FALSE
)
library(tidyverse)
library(ussc)
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("light grey")) +
geom_line(data = filter(pid_data, presName == "Trump"), aes(dop, inparty_app), colour = ussc_colours("red")) +
directlabels::geom_dl(data = filter(pid_data, presName == "Trump"), aes(dop, inparty_app, label = presName), method = "last.bumpup", colour = ussc_colours("red")) +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
xlim(c(0, 365))
pid_data <- read_csv("https://raw.githubusercontent.com/zmeers/dataviz_img/master/approval_pid.csv") %>%
mutate(inparty_app = inparty_app/100)
pid_data$pres_factor <- factor(pid_data$presName, levels=c("Eisenhower", "Kennedy", "Johnson","Nixon", "Ford", "Carter", "Reagan", "Bush Sr.", "Clinton", "Bush Jr.", "Obama", "Trump"))
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName, colour = presName)) +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
subtitle = "President Eisenhower to President Trump",
x = "# of days into first term",
y = NULL,
colour = NULL) +
scale_colour_ussc("main") +
scale_y_continuous(labels = scales::percent_format(accuracy = 2))
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("light grey")) +
geom_line(data = filter(pid_data, presName == "Trump"), aes(dop, inparty_app), colour = ussc_colours("red")) +
directlabels::geom_dl(data = filter(pid_data, presName == "Trump"), aes(dop, inparty_app, label = presName), method = "last.bumpup", colour = ussc_colours("red")) +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
xlim(c(0, 365))
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = "light grey") +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
theme(panel.grid.minor = element_blank()) +
scale_colour_ussc() +
facet_wrap(~pres_factor, ncol = 4)
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = "red") +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
theme(panel.grid.minor = element_blank()) +
scale_colour_ussc() +
facet_wrap(~pres_factor, ncol = 4)
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("red")) +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
theme(panel.grid.minor = element_blank()) +
scale_colour_ussc() +
facet_wrap(~pres_factor, ncol = 4)
ggplot(pid_data) +
geom_line(aes(dop, inparty_app), colour = ussc_colours("light grey")) +
geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("red")) +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
theme(panel.grid.minor = element_blank()) +
scale_colour_ussc() +
facet_wrap(~pres_factor, ncol = 4)
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("black")) +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
theme(panel.grid.minor = element_blank()) +
facet_wrap(~pres_factor, ncol = 4)
# ggplot(pid_data) +
#   geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("black")) +
gghighlight_line(pid_data, aes(dop, inparty_app, color = presName, group = presName)) +
facet_wrap(~ type)
# ggplot(pid_data) +
#   geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("black")) +
gghighlight::gghighlight_line(pid_data, aes(dop, inparty_app, color = presName, group = presName)) +
facet_wrap(~ type)
# ggplot(pid_data) +
#   geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("black")) +
gghighlight::gghighlight_line(pid_data, aes(x= dop, y = inparty_app, color = presName, group = presName)) +
facet_wrap(~ type)
# ggplot(pid_data) +
#   geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("black")) +
gghighlight::gghighlight_line(pid_data, aes(x= dop, y = inparty_app, color = presName)) +
facet_wrap(~ type)
gghighlight::gghighlight_line(pid_data, aes(x= dop, y = inparty_app, color = presName))
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("black")) +
facet_wrap(~ type)
ggplot(pid_data) +
geom_line(aes(dop, inparty_app, group = presName), colour = ussc_colours("black")) +
facet_wrap(~ type) +
theme_ussc() +
labs(title = "In-party approval rating for American presidents from 1956-2018",
x = "# of days into first term",
y = NULL) +
scale_y_continuous(labels = scales::percent_format(accuracy = 2)) +
theme(panel.grid.minor = element_blank()) +
facet_wrap(~pres_factor, ncol = 4)
tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Univers Ltd", "Bold", 14, "#444444", NA,
"Subtitle", "Univers Light", "Regular", 11, "#444444", NA,
"X and Y axis titles", "Univers Ltd", "Bold", 11, "#444444", NA,
"X and Y axis labels", "Univers Light", "Regular", 11, "#444444", NA,
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Univers Ltd", "Bold", 11, "#444444", NA,
"Key labels", "Univers Light", "Regular", 11, "#444444", NA,
"Annotations", "Univers Light", "Regular", 11, "#444444", NA,
"Caption (source and notes)", "Univers Light", "Regular", 10, "#444444", NA
)
tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Univers Ltd", "Bold", 14, "#444444", "The title should be pithy.",
"Subtitle", "Univers Light", "Regular", 11, "#444444", "For expanding on the title, if necessary.",
"X and Y axis titles", "Univers Ltd", "Bold", 11, "#444444", "X axis label should be horizontal, Y axis label should be vertical. Remove if the axis is obvious (i.e. year).",
"X and Y axis labels", "Univers Light", "Regular", 11, "#444444", "Labels should always be horizontal. Include units here. To save space, consider adding a unit for the first observation (at the top right hand corner for the Y axis or the bottom left hand corner for the X axis).",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Univers Ltd", "Bold", 11, "#444444", NA,
"Key labels", "Univers Light", "Regular", 11, "#444444", NA,
"Annotations", "Univers Light", "Regular", 11, "#444444", NA,
"Caption (source and notes)", "Univers Light", "Regular", 10, "#444444", NA
)
tribble(
~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Univers Ltd", "Bold", 14, "#444444", "The title should be pithy.",
"Subtitle", "Univers Light", "Regular", 11, "#444444", "For expanding on the title, if necessary.",
"X and Y axis titles", "Univers Ltd", "Bold", 11, "#444444", "X axis label should be horizontal, Y axis label should be vertical. Remove if the axis is obvious (i.e. year).",
"X and Y axis labels", "Univers Light", "Regular", 11, "#444444", "Labels should always be horizontal. Include units here. To save space, consider adding a unit for the first observation (at the top right hand corner for the Y axis or the bottom left hand corner for the X axis).",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Univers Ltd", "Bold", 11, "#444444", NA,
"Key labels", "Univers Light", "Regular", 11, "#444444", "Should always be horizontal. If the legend is either on top or at the bottom of the graph, set the key labels so that they are below/above the key and not beside it.",
"Annotations", "Univers Light", "Regular", 11, "#444444", NA,
"Caption (source and notes)", "Univers Light", "Regular", 10, "#444444", NA
)
tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Univers Ltd", "Bold", 14, "#444444", "The title should be pithy.",
"Subtitle", "Univers Light", "Regular", 11, "#444444", "For expanding on the title, if necessary.",
"X and Y axis titles", "Univers Ltd", "Bold", 11, "#444444", "X axis label should be horizontal, Y axis label should be vertical. Remove if the axis is obvious (i.e. year).",
"X and Y axis labels", "Univers Light", "Regular", 11, "#444444", "Labels should always be horizontal. Include units here. To save space, consider adding a unit for the first observation (at the top right hand corner for the Y axis or the bottom left hand corner for the X axis).",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Univers Ltd", "Bold", 11, "#444444", NA,
"Key labels", "Univers Light", "Regular", 11, "#444444", "Should always be horizontal. If the legend is either on top or at the bottom of the graph, set the key labels so that they are below/above the key and not beside it.",
"Annotations", "Univers Light", "Regular", 11, "#444444", NA,
"Caption (source and notes)", "Univers Light", "Regular", 10, "#444444", NA
)
table <- tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Univers Ltd", "Bold", 14, "#444444", "The title should be pithy.",
"Subtitle", "Univers Light", "Regular", 11, "#444444", "For expanding on the title, if necessary.",
"X and Y axis titles", "Univers Ltd", "Bold", 11, "#444444", "X axis label should be horizontal, Y axis label should be vertical. Remove if the axis is obvious (i.e. year).",
"X and Y axis labels", "Univers Light", "Regular", 11, "#444444", "Labels should always be horizontal. Include units here. To save space, consider adding a unit for the first observation (at the top right hand corner for the Y axis or the bottom left hand corner for the X axis).",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Univers Ltd", "Bold", 11, "#444444", NA,
"Key labels", "Univers Light", "Regular", 11, "#444444", "Should always be horizontal. If the legend is either on top or at the bottom of the graph, set the key labels so that they are below/above the key and not beside it.",
"Annotations", "Univers Light", "Regular", 11, "#444444", NA,
"Caption (source and notes)", "Univers Light", "Regular", 10, "#444444", NA
)
gt_tbl <- gt(data = table)
install.packages(""gt"")
install.packages("gt")
library(remotes)
remotes::install_github("rstudio/gt")
devtools::install_github("rstudio/gt")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("rstudio/gt")
update.packages("tidyselect")
devtools::install_github("rstudio/gt")
install.packages('tidyselect')
install.packages("tidyselect")
devtools::install_github("rstudio/gt")
install.packages('commonmark')
devtools::install_github("rstudio/gt")
install.packages('dplyr')
install.packages("dplyr")
devtools::install_github("rstudio/gt")
remotes::install_github("rstudio/gt")
p_load(cli, digest, pillar, pkgconfig, R6, stringi, tidyr)
pacman,p_load(cli, digest, pillar, pkgconfig, R6, stringi, tidyr)
pacman::p_load(cli, digest, pillar, pkgconfig, R6, stringi, tidyr)
install.packages("cli")
install.packages("cli")
install.packages('digest')
install.packages("digest")
install.packages('pillar')
install.packages("pillar")
install.packages("pkgconfig")
install.packages("pkgconfig")
install.packages('R6')
install.packages("R6")
install.packages('stringi')
install.packages("stringi")
install.packages('tidyr')
install.packages("tidyr")
remotes::install_github("rstudio/gt")
remotes::install_github("rstudio/gt")
gt_tbl <- gt(data = table)
library(gt)
setwd("..")
pkgdown::clean_site()
pkgdown::build_site()
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE
)
library(ggplot2)
library(ussc)
ggplot(iris, aes(Sepal.Width, Sepal.Length, colour = Species)) +
geom_point(size = 4, alpha=0.4) +
theme_ussc_dark() +
labs(title="Univers Header",
x="Univers Font: Sepal Width",
y="Univers Font: Sepal Length",
caption = "The data is from the Iris R package and is an example.") +
scale_colour_ussc("blue", reverse=TRUE)
uninstall.packages('ussc')
remove.packages('ussc')
devtools::install_github('usstudiescentre/ussc')
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE
)
library(ggplot2)
library(ussc)
ggplot(iris, aes(Sepal.Width, Sepal.Length, colour = Species)) +
geom_point(size = 4, alpha=0.4) +
theme_ussc_dark() +
labs(title="Univers Header",
x="Univers Font: Sepal Width",
y="Univers Font: Sepal Length",
caption = "The data is from the Iris R package and is an example.") +
scale_colour_ussc("blue", reverse=TRUE)
pkgdown::clean_site()
pkgdown::build_site()
install.packages('gt')
remotes::install_github("rstudio/gt")
pkgdown::clean_site()
pkgdown::build_site()
remove.packages('sp')
install.packages('sp')
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
devtools::build()
remove.packages('ussc')
devtools::install_github('usstudiescentre/ussc')
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE
)
library(ggplot2)
library(ussc)
usethis::edit_r_environ()
comms_kpi <-  ussc_confluence_table("950239240")
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE
)
library(ggplot2)
library(ussc)
comms_kpi <-  ussc_confluence_table("950239240")
comms_kpi <-  ussc_confluence_table("950239240")
library(dplyrr)
library(dplyr)
comms_kpi <-  ussc_confluence_table("950239240")
library(tidyverse)
comms_kpi <-  ussc_confluence_table("950239240")
View(comms_kpi)
online_kpi_table1 <- comms_kpi[1][[1]]
one_file <- ussc_confluence_excel(id = "950239621")
library(ussc)
one_file <- ussc_confluence_excel(id = "950239621")
uninstall.packages('ussc')
remove.packages('ussc')
devtools::install_github('usstudiescentre/ussc')
one_file <- ussc_confluence_excel(id = "950239621")
library(fs)
one_file <- ussc_confluence_excel(id = "950239621")
View(one_file)
pkgdown::clean_site()
pkgdown::build_site()
devtools::build()
pkgdown::clean_site()
devtools::build()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
devtools::build()
devtools::build()
remove.packages('ussc')
devtools::install_github()
devtools::install_github()
devtools::install_github('usstudiescentre/ussc')
devtools::build()
install.packages('docxtractr')
ussc_confluence_word_tables <- function(id = id,
username = Sys.getenv("CONFLUENCE_USERNAME"),
password = Sys.getenv("CONFLUENCE_PASSWORD")) {
req <- httr::GET(
url = glue::glue("https://usscsydney.atlassian.net/wiki/rest/api/content/{id}/child/attachment"),
httr::accept_json(),
httr::authenticate(username, password),
config <- httr::config(ssl_verifypeer = FALSE)
)
out <- httr::content(req)
# grab links from content info
links <- sapply(out[[1]], function(x) x$`_links`$download)
links <- links[grepl(".docx", links)]
prefix <- out$`_links`$base
titles <- sapply(out[[1]], function(x) x$title)
# Fix links
links <- glue::glue("{prefix}{links}&download=TRUE")
# Run browseURL (to account for JS load time)
# Note: I've set my browser (Firefox) to automatically download Excel files from the pop up option.
if (!fs::file_exists(glue::glue("~/Downloads/{titles}"))) {
if (!fs::file_exists(here::here(glue::glue("{titles}")))) {
map(links, ~browseURL(as.character(.x)))
Sys.sleep(3)
}
}
# Move the downloaded file from Downloads to current folder (if not already in folder)
# Note: delay set to 2 seconds to account for download time from the browser
if (file.exists(glue::glue("~/Downloads/{titles}"))) {
purrr::map(links, ~file_move(glue::glue("~/Downloads/{titles}"), here::here(glue::glue("{titles}"))))
Sys.sleep(0.5)
}
# grab sheetnames from Excel workbook, map data to list
dat <- purrr::map(here::here(glue::glue("{titles}")), ~.x %>%
map(docxtractr::read_docx(), path = .x) %>%
map(docx_extract_all_tbls))
return(dat)
}
ussc_confluence_word_tables(id = "30441548")
ussc_confluence_word_tables <- function(id = id,
username = Sys.getenv("CONFLUENCE_USERNAME"),
password = Sys.getenv("CONFLUENCE_PASSWORD")) {
req <- httr::GET(
url = glue::glue("https://usscsydney.atlassian.net/wiki/rest/api/content/{id}/child/attachment"),
httr::accept_json(),
httr::authenticate(username, password),
config <- httr::config(ssl_verifypeer = FALSE)
)
out <- httr::content(req)
# grab links from content info
links <- sapply(out[[1]], function(x) x$`_links`$download)
links <- links[grepl(".docx", links)]
prefix <- out$`_links`$base
titles <- sapply(out[[1]], function(x) x$title)
# Fix links
links <- glue::glue("{prefix}{links}&download=TRUE")
# Run browseURL (to account for JS load time)
# Note: I've set my browser (Firefox) to automatically download Excel files from the pop up option.
if (!fs::file_exists(glue::glue("~/Downloads/{titles}"))) {
if (!fs::file_exists(here::here(glue::glue("{titles}")))) {
purrr::map(links, ~browseURL(as.character(.x)))
Sys.sleep(3)
}
}
# Move the downloaded file from Downloads to current folder (if not already in folder)
# Note: delay set to 2 seconds to account for download time from the browser
if (file.exists(glue::glue("~/Downloads/{titles}"))) {
purrr::map(links, ~file_move(glue::glue("~/Downloads/{titles}"), here::here(glue::glue("{titles}"))))
Sys.sleep(0.5)
}
# grab sheetnames from Excel workbook, map data to list
dat <- purrr::map(here::here(glue::glue("{titles}")), ~.x %>%
purrr::map(docxtractr::read_docx(), path = .x) %>%
purrr::map(docx_extract_all_tbls))
return(dat)
}
ussc_confluence_word_tables(id = "30441548")
library(tidyverse)
ussc_confluence_word_tables <- function(id = id,
username = Sys.getenv("CONFLUENCE_USERNAME"),
password = Sys.getenv("CONFLUENCE_PASSWORD")) {
req <- httr::GET(
url = glue::glue("https://usscsydney.atlassian.net/wiki/rest/api/content/{id}/child/attachment"),
httr::accept_json(),
httr::authenticate(username, password),
config <- httr::config(ssl_verifypeer = FALSE)
)
out <- httr::content(req)
# grab links from content info
links <- sapply(out[[1]], function(x) x$`_links`$download)
links <- links[grepl(".docx", links)]
prefix <- out$`_links`$base
titles <- sapply(out[[1]], function(x) x$title)
# Fix links
links <- glue::glue("{prefix}{links}&download=TRUE")
# Run browseURL (to account for JS load time)
# Note: I've set my browser (Firefox) to automatically download Excel files from the pop up option.
if (!fs::file_exists(glue::glue("~/Downloads/{titles}"))) {
if (!fs::file_exists(here::here(glue::glue("{titles}")))) {
purrr::map(links, ~browseURL(as.character(.x)))
Sys.sleep(3)
}
}
# Move the downloaded file from Downloads to current folder (if not already in folder)
# Note: delay set to 2 seconds to account for download time from the browser
if (file.exists(glue::glue("~/Downloads/{titles}"))) {
purrr::map(links, ~file_move(glue::glue("~/Downloads/{titles}"), here::here(glue::glue("{titles}"))))
Sys.sleep(0.5)
}
# grab sheetnames from Excel workbook, map data to list
dat <- purrr::map(here::here(glue::glue("{titles}")), ~.x %>%
purrr::map(docxtractr::read_docx(), path = .x) %>%
purrr::map(docx_extract_all_tbls))
return(dat)
}
ussc_confluence_word_tables(id = "30441548")
ussc_confluence_word_tables(id = "30441548")
ussc_confluence_word_tables <- function(id = id,
username = Sys.getenv("CONFLUENCE_USERNAME"),
password = Sys.getenv("CONFLUENCE_PASSWORD")) {
req <- httr::GET(
url = glue::glue("https://usscsydney.atlassian.net/wiki/rest/api/content/{id}/child/attachment"),
httr::accept_json(),
httr::authenticate(username, password),
config <- httr::config(ssl_verifypeer = FALSE)
)
out <- httr::content(req)
# grab links from content info
links <- sapply(out[[1]], function(x) x$`_links`$download)
links <- links[grepl(".docx", links)]
prefix <- out$`_links`$base
titles <- sapply(out[[1]], function(x) x$title)
# Fix links
links <- glue::glue("{prefix}{links}&download=TRUE")
# Run browseURL (to account for JS load time)
# Note: I've set my browser (Firefox) to automatically download Excel files from the pop up option.
if (!fs::file_exists(glue::glue("~/Downloads/{titles}"))) {
if (!fs::file_exists(here::here(glue::glue("{titles}")))) {
purrr::map(links, ~browseURL(as.character(.x)))
Sys.sleep(3)
}
}
# Move the downloaded file from Downloads to current folder (if not already in folder)
# Note: delay set to 2 seconds to account for download time from the browser
if (file.exists(glue::glue("~/Downloads/{titles}"))) {
purrr::map(links, ~fs::file_move(glue::glue("~/Downloads/{titles}"), here::here(glue::glue("{titles}"))))
Sys.sleep(0.5)
}
# grab sheetnames from Excel workbook, map data to list
dat <- purrr::map(here::here(glue::glue("{titles}")), ~.x %>%
purrr::map(docxtractr::read_docx(), path = .x) %>%
purrr::map(docx_extract_all_tbls))
return(dat)
}
ussc_confluence_word_tables(id = "30441548")
purrr::map(here::here(glue::glue("{titles}")), ~.x %>%
purrr::map(docxtractr::read_docx(), path = .x))
