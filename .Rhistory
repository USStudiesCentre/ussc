scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(
aes(x = -80, y  = 50, xend = -70, yend = 40),
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = 0.3)  +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(
aes(x = -80, y  = 50, xend = -70, yend = 40),
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = -0.3)  +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
aes(x = -80, y  = 50, xend = -83, yend = 40),
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(
aes(x = -80, y  = 50, xend = -83, yend = 40),
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = -0.3)  +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(
aes(x = -80, y  = 50, xend = -83, yend = 45),
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = -0.3)  +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(
aes(x = -70, y  = 50, xend = -83, yend = 45),
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = -0.3)  +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(x = -88, y = 50, xend = -90, yend = 45)
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(aes(x = -88, y = 50, xend = -90, yend = 45))
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
geom_curve(aes(x = -88, y = 50, xend = -90, yend = 45)) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(crimes, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = Assault), map = fifty_states, colour = "white") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_fill_ussc("light", discrete = FALSE) +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
annotate("text", x = -88, y = 50, label = "Borders should be\nthin and white", color = "purple") +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
library(pacman)
p_load(USAboundaries, leaflet, sf, tidyverse, stringr, ussc, here, svglite)
nc_districts <- us_congressional(states = "NC")
nc_cities <- us_cities(states = "NC") %>%
arrange(desc(population)) %>%
slice(1:10)
load(here("~/dropboxsydneyuni/midterms_ussc/congress/data/cong.RData"))
nc_districts <- us_congressional(states = "NC")
nc_cities <- us_cities(states = "NC") %>%
arrange(desc(population)) %>%
slice(1:10)
load("~/dropboxsydneyuni/midterms_ussc/congress/data/cong.RData")
nc_districts <- us_congressional(states = "NC")
nc_cities <- us_cities(states = "NC") %>%
arrange(desc(population)) %>%
slice(1:10)
readRDS("~/dropboxsydneyuni/midterms_ussc/congress/data/cong.RData")
congress <- cong %>%
filter(year == "2016" & stpost == "NC") %>%
mutate(district = as.character(as.numeric(district)))
readRDS("~/dropboxsydneyuni/midterms_ussc/congress/data/cong.RData")
cong <- readRDS("~/dropboxsydneyuni/midterms_ussc/congress/data/cong.RData")
congress <- cong %>%
filter(year == "2016" & stpost == "NC") %>%
mutate(district = as.character(as.numeric(district)))
View(cong)
View(cong)
congress <- cong %>%
filter(year == "2016" & cd == starts_with("NC")) %>%
mutate(district = as.character(as.numeric(district)))
congress <- cong %>%
filter(cd == starts_with("NC")) %>%
mutate(district = as.character(as.numeric(district)))
congress <- cong %>%
filter(cd = starts_with("NC")) %>%
mutate(district = as.character(as.numeric(district)))
cong$statenm
congress <- cong %>%
filter(year == "2016" &  cd == starts_with("NC"))
congress <- cong %>%
filter(cd == starts_with("NC"))
congress <- cong %>%
filter(starts_with(CD, "NC")) %>%
mutate(district = as.character(as.numeric(district)))
congress <- cong %>%
filter(starts_with(cd, "NC")) %>%
mutate(district = as.character(as.numeric(district)))
congress <- cong %>%
filter(starts_with(cd, "NC"))
congress <- cong %>%
filter(str_detect(cd, "^NC"))
View(congress)
congress <- cong %>%
filter(str_detect(cd, "^NC")) %>%
mutate(district = as.character(as.numeric(district)))
load(here("congress/data/cong.RData"))
load("~/dropboxsydneyuni/midterms_ussc/congress/data/cong.RData"))
cong <- readRDS("~/dropboxsydneyuni/midterms_ussc/congress/data/cong.RData"))
legislators <- read.csv("~/dropboxsydneyuni/midterms_ussc/congress/data/legislators-current.csv") %>%
filter(state == "NC" & type == "rep") %>%
select(1:9) %>%
mutate(party_colour = case_when(
party == "Democrat" ~ "#009de3",
party == "Republican" ~ "#ed1b35"
)) %>%
mutate(district = as.character(district)) %>%
left_join(congress) %>%
mutate(district = paste0("0", district)) %>%
mutate(district = gsub("010", "10", district)) %>%
mutate(district = gsub("011", "11", district)) %>%
mutate(district = gsub("012", "12", district)) %>%
mutate(district = gsub("013", "13", district))
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE,
echo = FALSE
)
library(tidyverse)
library(ussc)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("https://leafletjs.com/examples/choropleth/us-states.js", what = "sp")
states <- geojsonio::geojson_read("https://leafletjs.com/examples/choropleth/us-states.json", what = "sp")
states <- geojsonio::geojson_read("https://leafletjs.com/examples/choropleth/us-states.js", what = "sp")
# From http://eric.clst.org/Stuff/USGeoJSON and
# https://en.wikipedia.org/wiki/List_of_United_States_counties_and_county_equivalents
nycounties <- geojsonio::geojson_read("json/nycounties.geojson",
what = "sp")
# From http://eric.clst.org/Stuff/USGeoJSON and
# https://en.wikipedia.org/wiki/List_of_United_States_counties_and_county_equivalents
library(geojsonio)
nycounties <- geojsonio::geojson_read("json/nycounties.geojson",
what = "sp")
require(maptools) # required for rgdal to work correctly
require(tigris)
require(acs)
require(stringr) # to pad FIPS codes
require(leaflet)
tracts <- tracts(state = 'TX', cb=TRUE)
??tracts
tracts <- tigris::tracts(state = 'TX', cb=TRUE)
require(tigris)
library(tigris)
install.packages("tigris")
library(maptools) # required for rgdal to work correctly
library(leaflet)
tracts <- tigris::tracts(state = 'TX', cb=TRUE)
## Fetch the data from the Census website
fetched <- acs.fetch(
geography = geo.make(state = "TX", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
library(acs)
install.packages("acs")
library(tidycensus)
install.packages("tidycensus")
library(tidycensus)
options(tigris_use_cache = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
census_api_key(f7d06486fae237db3088ae84de7add5fcdcc1b88)
census_api_key("f7d06486fae237db3088ae84de7add5fcdcc1b88")
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
ny <- get_acs(geography = "tract",
variables = "B19013_001",
state = "NY",
county = "New York",
geometry = TRUE)
## Fetch the data from the Census website
fetched <- acs.fetch(
geography = geo.make(state = "TX", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## Fetch the data from the Census website
fetched <- acs::acs.fetch(
geography = geo.make(state = "TX", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
## Convert to a data.frame for merging
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
## Convert to a data.frame for merging
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
## Fetch the data from the Census website
fetched <- acs::acs.fetch(
geography = geo.make(state = "TX", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## Convert to a data.frame for merging
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
acs_df           <- select(acs_df, 1:3) %>% tbl_df()
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
## Convert to a data.frame for merging
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
## Convert to a data.frame for merging
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
orange <- get_acs(state = "CA", county = "Orange", geography = "tract",
variables = "B19013_001", geometry = TRUE)
install.packages("tidycensus")
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE,
echo = FALSE
)
library(tidyverse)
library(ussc)
orange <- get_acs(state = "CA", county = "Orange", geography = "tract",
variables = "B19013_001", geometry = TRUE)
library(tidycensus)
orange <- get_acs(state = "CA", county = "Orange", geography = "tract",
variables = "B19013_001", geometry = TRUE)
View(cong)
s <- rgdal::readOGR("../geo/cb_2017_us_cd115_5m",
verbose=FALSE)
s <- rgdal::readOGR("~/dropboxsydneyuni/midterms_ussc/gerrymandering/geo/cb_2017_us_cd115_5m",
verbose=FALSE)
nc <- s[s$STATEFP==37,]
labels <- gsub(nc$CD115FP,pattern="^0",replacement="") %>%
lapply(htmltools::HTML)
leaflet(nc,width=900,height=500) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addPolygons(
stroke = TRUE,
fillColor="blue",
weight = 2,
opacity = 1,
color = "red",
fillOpacity=0.2,
dashArray = "1",
label=labels)
library(leaflet)
leaflet(nc,width=900,height=500) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addPolygons(
stroke = TRUE,
fillColor="blue",
weight = 2,
opacity = 1,
color = "red",
fillOpacity=0.2,
dashArray = "1",
label=labels)
setwd("~/dropboxsydneyuni/rpackages/ussc")
pkgdown::clean_site()
pkgdown::build_site()
leaflet(nc,width=900,height=500) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addPolygons(
stroke = TRUE,
fillColor="blue",
weight = 2,
opacity = 1,
color = "white",
fillOpacity=0.2,
dashArray = "1",
label=labels)
leaflet(nc,width=900,height=500) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addPolygons(
stroke = TRUE,
fillColor="blue",
weight = 2,
opacity = 1,
color = ussc_colours("light blue"),
fillOpacity=0.2,
dashArray = "1",
label=labels)
leaflet(nc,width=900,height=500) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addPolygons(
stroke = TRUE,
fillColor="blue",
weight = 2,
opacity = 1,
color = "red",
fillOpacity=0.2,
dashArray = "1",
label=labels)
s <- rgdal::readOGR("~/dropboxsydneyuni/midterms_ussc/gerrymandering/geo/cb_2017_us_cd115_5m",
verbose=FALSE)
nc <- s[s$STATEFP==37,]
labels <- gsub(nc$CD115FP,pattern="^0",replacement="") %>%
lapply(htmltools::HTML)
library(leaflet)
leaflet(nc,width=600,height=400) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addPolygons(
stroke = TRUE,
fillColor="blue",
weight = 2,
opacity = 1,
color = "red",
fillOpacity=0.2,
dashArray = "1",
label=labels)
s <- rgdal::readOGR("~/dropboxsydneyuni/midterms_ussc/gerrymandering/geo/cb_2017_us_cd115_5m",
verbose=FALSE)
nc <- s[s$STATEFP==37,]
labels <- gsub(nc$CD115FP,pattern="^0",replacement="") %>%
lapply(htmltools::HTML)
library(leaflet)
leaflet(nc,width=600,height=500) %>%
addProviderTiles(providers$Stamen.Toner) %>%
addPolygons(
stroke = TRUE,
fillColor="blue",
weight = 2,
opacity = 1,
color = "red",
fillOpacity=0.2,
dashArray = "1",
label=labels)
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
435/2
435/2 + 1
round(435/2)
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
