logo <- magick::image_read_svg(system.file("USSC_convert_positive.svg", package = "ussc")) %>%
magick::image_chop("450x875+315") %>%
grid::rasterGrob(interpolate = TRUE)
logo_plot <- ggplot(mapping = aes(x = 0:1, y = 1)) + theme_void() +
annotation_custom(grob = logo, xmin = 0.85, xmax = 1.055)
gridExtra::grid.arrange(ggplot_object, logo_plot, heights = c(0.93,
0.1))
}
library(ussc)
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::clean_site()
pkgdown::build_site()
update.packages('pkgdown')
update.packages('pkgdown')
pkgdown::build_site()
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE
)
knitr::include_graphics("https://zmeers.github.io/gifs/example_ioslides.gif")
pkgdown::build_site()
pkgdown::build_site(examples = F)
pkgdown::build_site(examples = F, lazy = T)
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE,
echo = FALSE
)
library(tidyverse)
library(ussc)
ussc_fonts()
library(gt)
table <- tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Halis GR", "Bold", 14, "#444444", "The title should be pithy and SEO-friendly. Titles should explain the content within the graph, not solely describe the axis labels.",
"Subtitle", "Halis GR", "Regular", 11, "#444444", "Use a subtitle if you need to expand or add clarification to your title.",
"Grid lines", NA, NA,"Major grid line- 0.5pt\nMinor grid line - 0.25", "#EBEBEB", "Remove grid lines unless necessary.",
"X and Y axis titles", "Halis GR", "Bold", 11, "#444444", "X axis labels should be horizontal and Y axis labels should be vertical. Remove from the graph if the axis is obvious (i.e. year).",
"X and Y axis labels", "Halis GR", "Regular", 12, "#444444", "Labels should always be horizontal. Include units and punctuation (i.e. break large numbers with commas). To save space, consider adding a unit only for the first observation.",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Halis GR", "Bold", 11, "#444444", NA,
"Key labels", "Halis GR", "Regular", 12, "#444444", "Key labels should always be horizontal.",
"Annotations", "Halis GR", "Regular", 11, "#444444", NA,
"Caption (source and notes)", "Halis GR", "Regular", 10, "#444444", NA,
"Small multiple labels", "Halis GR", "Bold", 10, "#444444", NA
)
table <- tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Halis GR", "Bold", "14", "#444444", "The title should be pithy and SEO-friendly. Titles should explain the content within the graph, not solely describe the axis labels.",
"Subtitle", "Halis GR", "Regular", "11", "#444444", "Use a subtitle if you need to expand or add clarification to your title.",
"Grid lines", NA, NA,"Major grid line- 0.5pt\nMinor grid line - 0.25", "#EBEBEB", "Remove grid lines unless necessary.",
"X and Y axis titles", "Halis GR", "Bold", "11", "#444444", "X axis labels should be horizontal and Y axis labels should be vertical. Remove from the graph if the axis is obvious (i.e. year).",
"X and Y axis labels", "Halis GR", "Regular", "12", "#444444", "Labels should always be horizontal. Include units and punctuation (i.e. break large numbers with commas). To save space, consider adding a unit only for the first observation.",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Halis GR", "Bold", "11", "#444444", NA,
"Key labels", "Halis GR", "Regular", "12", "#444444", "Key labels should always be horizontal.",
"Annotations", "Halis GR", "Regular", "11", "#444444", NA,
"Caption (source and notes)", "Halis GR", "Regular", "10", "#444444", NA,
"Small multiple labels", "Halis GR", "Bold", "10", "#444444", NA
) %>%
rename("rowname" = 'x')
library(gt)
gt_tbl <- gt(data = table)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = cells_styles(
text_weight = "light",
text_size = 10),
locations = cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
pkgdown::build_site(examples = F, lazy = T)
pkgdown::build_site(examples = F, lazy = T)
pkgdown::build_site(examples = F)
remotes::install_github('usstudiescentre/ussc')
pkgdown::build_site()
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE,
echo = FALSE
)
library(tidyverse)
library(ussc)
ussc_fonts()
library(gt)
table <- tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Halis GR", "Bold", "14", "#444444", "The title should be pithy and SEO-friendly. Titles should explain the content within the graph, not solely describe the axis labels.",
"Subtitle", "Halis GR", "Regular", "11", "#444444", "Use a subtitle if you need to expand or add clarification to your title.",
"Grid lines", NA, NA,"Major grid line- 0.5pt; Minor grid line - 0.25", "#EBEBEB", "Remove grid lines unless necessary.",
"X and Y axis titles", "Halis GR", "Bold", "11", "#444444", "X axis labels should be horizontal and Y axis labels should be vertical. Remove from the graph if the axis is obvious (i.e. year).",
"X and Y axis labels", "Halis GR", "Regular", "12", "#444444", "Labels should always be horizontal. Include units and punctuation (i.e. break large numbers with commas). To save space, consider adding a unit only for the first observation.",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Halis GR", "Bold", "11", "#444444", NA,
"Key labels", "Halis GR", "Regular", "12", "#444444", "Key labels should always be horizontal.",
"Annotations", "Halis GR", "Regular", "11", "#444444", NA,
"Caption (source and notes)", "Halis GR", "Regular", "10", "#444444", NA,
"Small multiple labels", "Halis GR", "Bold", "10", "#444444", NA
) %>%
rename("rowname" = 'x')
library(gt)
gt_tbl <- gt(data = table)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = cells_styles(
text_weight = "light",
text_size = 10),
locations = cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
table <- tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Halis GR", "Bold", "14", "#444444", "The title should be pithy and SEO-friendly. Titles should explain the content within the graph, not solely describe the axis labels.",
"Subtitle", "Halis GR", "Regular", "11", "#444444", "Use a subtitle if you need to expand or add clarification to your title.",
"Grid lines", NA, NA,"Major grid line- 0.5pt; Minor grid line - 0.25", "#EBEBEB", "Remove grid lines unless necessary.",
"X and Y axis titles", "Halis GR", "Bold", "11", "#444444", "X axis labels should be horizontal and Y axis labels should be vertical. Remove from the graph if the axis is obvious (i.e. year).",
"X and Y axis labels", "Halis GR", "Regular", "12", "#444444", "Labels should always be horizontal. Include units and punctuation (i.e. break large numbers with commas). To save space, consider adding a unit only for the first observation.",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Halis GR", "Bold", "11", "#444444", NA,
"Key labels", "Halis GR", "Regular", "12", "#444444", "Key labels should always be horizontal.",
"Annotations", "Halis GR", "Regular", "11", "#444444", NA,
"Caption (source and notes)", "Halis GR", "Regular", "10", "#444444", NA,
"Small multiple labels", "Halis GR", "Bold", "10", "#444444", NA
) %>%
rename("rowname" = 'x')
library(gt)
gt_tbl <- gt(data = table)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = cells_text(
text_weight = "light",
text_size = 10),
locations = cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
update.packages('gt')
table <- tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Halis GR", "Bold", "14", "#444444", "The title should be pithy and SEO-friendly. Titles should explain the content within the graph, not solely describe the axis labels.",
"Subtitle", "Halis GR", "Regular", "11", "#444444", "Use a subtitle if you need to expand or add clarification to your title.",
"Grid lines", NA, NA,"Major grid line- 0.5pt; Minor grid line - 0.25", "#EBEBEB", "Remove grid lines unless necessary.",
"X and Y axis titles", "Halis GR", "Bold", "11", "#444444", "X axis labels should be horizontal and Y axis labels should be vertical. Remove from the graph if the axis is obvious (i.e. year).",
"X and Y axis labels", "Halis GR", "Regular", "12", "#444444", "Labels should always be horizontal. Include units and punctuation (i.e. break large numbers with commas). To save space, consider adding a unit only for the first observation.",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Halis GR", "Bold", "11", "#444444", NA,
"Key labels", "Halis GR", "Regular", "12", "#444444", "Key labels should always be horizontal.",
"Annotations", "Halis GR", "Regular", "11", "#444444", NA,
"Caption (source and notes)", "Halis GR", "Regular", "10", "#444444", NA,
"Small multiple labels", "Halis GR", "Bold", "10", "#444444", NA
) %>%
rename("rowname" = 'x')
library(gt)
gt_tbl <- gt(data = table)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = cells_text(
text_weight = "light",
text_size = 10),
locations = cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = gt::cells_text(
text_weight = "light",
text_size = 10),
locations = gt::cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE,
echo = FALSE
)
library(tidyverse)
library(ussc)
ussc_fonts()
library(gt)
table <- tribble(
~x, ~Font, ~Fontface, ~Size, ~Colour, ~Notes,
"Title", "Halis GR", "Bold", "14", "#444444", "The title should be pithy and SEO-friendly. Titles should explain the content within the graph, not solely describe the axis labels.",
"Subtitle", "Halis GR", "Regular", "11", "#444444", "Use a subtitle if you need to expand or add clarification to your title.",
"Grid lines", NA, NA,"Major grid line- 0.5pt; Minor grid line - 0.25", "#EBEBEB", "Remove grid lines unless necessary.",
"X and Y axis titles", "Halis GR", "Bold", "11", "#444444", "X axis labels should be horizontal and Y axis labels should be vertical. Remove from the graph if the axis is obvious (i.e. year).",
"X and Y axis labels", "Halis GR", "Regular", "12", "#444444", "Labels should always be horizontal. Include units and punctuation (i.e. break large numbers with commas). To save space, consider adding a unit only for the first observation.",
"Axis ticks", NA, NA, NA, "#D3D3D3", NA,
"Legend title", "Halis GR", "Bold", "11", "#444444", NA,
"Key labels", "Halis GR", "Regular", "12", "#444444", "Key labels should always be horizontal.",
"Annotations", "Halis GR", "Regular", "11", "#444444", NA,
"Caption (source and notes)", "Halis GR", "Regular", "10", "#444444", NA,
"Small multiple labels", "Halis GR", "Bold", "10", "#444444", NA
) %>%
rename("rowname" = 'x')
library(gt)
gt_tbl <- gt(data = table)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = gt::cells_text(
text_weight = "light",
text_size = 10),
locations = gt::cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = gt::cell_text(
text_weight = "light",
text_size = 10),
locations = gt::cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = gt::cell_text(
weight = "light",
size = 10),
locations = gt::cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
gt_tbl %>%
tab_header(
title = md("**USSC data visualisation manual**")
) %>%
cols_label(
# `Graphical element` = md("**Graphical element**"),
`Font` = md("*Font*"),
`Fontface` = md("*Fontface*"),
`Size` = md("*Size*"),
`Colour` = md("*Colour*"),
`Notes` = md("***Notes***")
) %>%
tab_style(
style = gt::cell_text(
weight = "lighter",
size = 10),
locations = gt::cells_data(
columns = vars(Font, Fontface, Size, Colour, Notes))
)
pkgdown::build_site()
install.packages('fifystater')
library(albersusa)
# map_id creates the aesthetic mapping to the state name column in your data
ggplot() +
geom_sf(data = us_sf, size = 0.125, aes(fill = pop_2012), color = 'white') +
scale_fill_gradient(low="#4aace9", high="#2f2665") +
annotate("text", x = -88, y = 50, label = "Borders should (usually) be thin light lines", color = "purple") +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
us_sf <- usa_sf("laea")
# map_id creates the aesthetic mapping to the state name column in your data
ggplot() +
geom_sf(data = us_sf, size = 0.125, aes(fill = pop_2012), color = 'white') +
scale_fill_gradient(low="#4aace9", high="#2f2665") +
annotate("text", x = -88, y = 50, label = "Borders should (usually) be thin light lines", color = "purple") +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
# map_id creates the aesthetic mapping to the state name column in your data
ggplot() +
geom_sf(data = us_sf, size = 0.125, aes(fill = pop_2012), color = 'white') +
scale_fill_gradient(low="#4aace9", high="#2f2665") +
annotate("text", x = -88, y = 50, label = "Borders should (usually) be thin light lines", color = "purple") +
labs(x = "", y = "") +
theme(legend.position = "left",
panel.background = element_blank())
# map_id creates the aesthetic mapping to the state name column in your data
ggplot() +
geom_sf(data = us_sf, size = 0.125, aes(fill = pop_2012), color = 'white') +
scale_fill_gradient(low="#4aace9", high="#2f2665") +
annotate("text", x = -88, y = 100, label = "Borders should (usually) be thin light lines", color = "purple") +
labs(x = "", y = "") +
theme(legend.position = "left",
panel.background = element_blank())
# map_id creates the aesthetic mapping to the state name column in your data
ggplot() +
geom_sf(data = us_sf, size = 0.125, aes(fill = pop_2012), color = 'white') +
scale_fill_gradient(low="#4aace9", high="#2f2665") +
labs(x = "", y = "") +
theme(legend.position = "left",
panel.background = element_blank())
# map_id creates the aesthetic mapping to the state name column in your data
ggplot() +
geom_sf(data = us_sf, size = 0.125, aes(fill = pop_2012), color = 'white') +
scale_fill_gradient(low="#4aace9", high="#2f2665") +
labs(x = "", y = "", fill = "2012 population") +
theme(legend.position = "left",
panel.background = element_blank())
options(scipen = 999)
# map_id creates the aesthetic mapping to the state name column in your data
ggplot() +
geom_sf(data = us_sf, size = 0.125, aes(fill = pop_2012), color = 'white') +
scale_fill_gradient(low="#4aace9", high="#2f2665") +
labs(x = "", y = "", fill = "2012 population") +
theme(legend.position = "left",
panel.background = element_blank())
pkgdown::build_site()
pkgdown::build_site()
.Last.error.trace
one <- ggplot(data=economics, aes(x=date, y=pop))+
geom_line() +
theme_ussc() +
scale_y_continuous(labels = scales::comma) +
labs(title = "a) Standard line graph") +
theme(panel.grid.minor = element_blank()) +
# geom_text(aes("1990-03-01", 30000, label = "Lines are thin with a square edge", color = "purple"))
annotate("text", x = as.Date("1990-08-01"), y = 300000, label = "Lines are thin with a square edge", color = "purple") +
geom_curve(
aes(x = as.Date("1990-08-01"), y  = 295000, xend = as.Date("1995-08-01"), yend = 280000),
data = economics,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = 0.3) +
geom_curve(
aes(x = as.Date("1990-08-01"), y  = 305000, xend = as.Date("2014-08-01"), yend = 319000),
data = economics,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = -0.3)  +
labs(x = NULL,
y = "Population")
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df3 <- data_summary(ToothGrowth, varname="len",
groupnames=c("supp", "dose"))
two <- ggplot(df3, aes(x=dose, y=len, group=supp, color=supp)) +
geom_errorbar(aes(ymin=len-sd, ymax=len+sd), width=.1,
position=position_dodge(0.05)) +
geom_line() +
geom_point() +
xlab("Dose (mg)") +
ylab("Tooth length") +
annotate("text", x = 1.2, y = 25, label = "Orange Juice", colour = ussc_colours("dark blue")) +
annotate("text", x = 2.1, y = 28, label = "Ascorbic\nacid", colour = ussc_colours("red")) +
scale_colour_ussc() +
labs(title = "b) Line graph with standard error bars",
subtitle = "The Effect of Vitamin C on Tooth Growth in Guinea Pigs") +
theme_ussc() +
theme(legend.position = 'none',
panel.grid.minor = element_blank())
cowplot::plot_grid(one, two, nrow = 2)
data_summary <- function(data, varname, groupnames){
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<- plyr::ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df3 <- data_summary(ToothGrowth, varname="len",
groupnames=c("supp", "dose"))
two <- ggplot(df3, aes(x=dose, y=len, group=supp, color=supp)) +
geom_errorbar(aes(ymin=len-sd, ymax=len+sd), width=.1,
position=position_dodge(0.05)) +
geom_line() +
geom_point() +
xlab("Dose (mg)") +
ylab("Tooth length") +
annotate("text", x = 1.2, y = 25, label = "Orange Juice", colour = ussc_colours("dark blue")) +
annotate("text", x = 2.1, y = 28, label = "Ascorbic\nacid", colour = ussc_colours("red")) +
scale_colour_ussc() +
labs(title = "b) Line graph with standard error bars",
subtitle = "The Effect of Vitamin C on Tooth Growth in Guinea Pigs") +
theme_ussc() +
theme(legend.position = 'none',
panel.grid.minor = element_blank())
cowplot::plot_grid(one, two, nrow = 2)
pkgdown::build_site()
one <- ggplot(data=economics, aes(x=date, y=pop))+
geom_line() +
theme_ussc() +
scale_y_continuous(labels = scales::comma) +
labs(title = "a) Standard line graph") +
theme(panel.grid.minor = element_blank()) +
# geom_text(aes("1990-03-01", 30000, label = "Lines are thin with a square edge", color = "purple"))
annotate("text", x = as.Date("1990-08-01"), y = 300000, label = "Lines are thin with a square edge", color = "purple") +
geom_curve(
aes(x = as.Date("1990-08-01"), y  = 295000, xend = as.Date("1995-08-01"), yend = 280000),
data = economics,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = 0.3) +
geom_curve(
aes(x = as.Date("1990-08-01"), y  = 305000, xend = as.Date("2014-08-01"), yend = 319000),
data = economics,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple",
curvature = -0.3)  +
labs(x = NULL,
y = "Population")
data_summary <- function(data, varname, groupnames){
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<- plyr::ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df3 <- data_summary(ToothGrowth, varname="len",
groupnames=c("supp", "dose"))
View(df3)
pkgdown::build_site()
remotes::install_github("rstudio/rmarkdown")
pkgdown::build_site()
librray(albersusa)
library(albersusa)
