map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate(body, into = c("info", "body"), sep = "^.*[0-9]{0,2}\\):  ") %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate(body, into = c("info", "body"), sep = ":  ") %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest(value, variable) %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest(value, variable) %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest(value, .preserve = variable) %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest(value, .preserve = variable) %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest(value) %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest(value) %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest()
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number())
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)),
type = list(map(xml_parent(.x), xml_name)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)),
type = list(map(xml_parents(.x), xml_name)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_talker <- xml %>%
xml_find_all('//speech') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)),
type = list(map(xml_parents(.x), xml_name)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)),
type = list(map(xml_parents(.x), xml_name)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_talker <- xml %>%
xml_find_all('//speech') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
separate_rows(body, sep = "\\.([^:]*):  ") %>%
separate_rows(body, sep = "\\.^(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
separate_rows(body, sep = "\\?(M(?:is)?s|(?:Mrs?))([^:]*):") %>%
mutate(pos = row_number())
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos"))
str(speech_talker)
speech_talker <- xml %>%
xml_find_all('//speech//talker') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos) %>%
full_join(speech_text, by = c("speech_pos" = "pos")) %>%
unlist()
View(speech_text)
speech_talker
speech_text <- xml %>%
xml_find_all('//speech//talk.text') %>%
map_df(~data_frame(variable = list(map(xml_children(.x), xml_name)),
value = list(map(xml_children(.x), xml_text)))) %>%
mutate(speech_pos = row_number()) %>%
unnest() %>%
spread(variable, -speech_pos)
head(speech_text,2)
head(speech_text,3)
speech_text$body[1]
speech_text$body[2]
speech_text$body[3]
speech_text$body[4]
speech_text$body[5]
speech_text <- speech_text %>% mutate(as.vector(body))
str(speech_text)
speech_text <- speech_text %>% unnest()
View(speech_text)
speech_text <- speech_text %>% unnest(body)
View(speech_text)
install.packages("googlesheets")
library(googlesheets)
library(tidyverse)
(my_sheets <- gs_ls())
my_sheets %>% glimpse()
my_sheets$sheet_title
popular_vote <- gs_title("2018 House Popular Vote Tracker")
View(popular_vote)
popular_vote
popular_vote_url <- "https://docs.google.com/spreadsheets/d/1WxDaxD5az6kdOjJncmGph37z0BPNhV1fNAH_g7IkpC0/"
popular_vote_url <- "https://docs.google.com/spreadsheets/d/1WxDaxD5az6kdOjJncmGph37z0BPNhV1fNAH_g7IkpC0/" %>%  gs_url()
popular_vote_url <- "https://docs.google.com/spreadsheets/d/1WxDaxD5az6kdOjJncmGph37z0BPNhV1fNAH_g7IkpC0/" %>%  gs_url() %>% gs_read()
popular_vote_url <- "https://docs.google.com/spreadsheets/d/1WxDaxD5az6kdOjJncmGph37z0BPNhV1fNAH_g7IkpC0/edit#gid=0" %>%
gs_url() %>%
gs_read()
popular_vote_tracker_2018 <- "https://docs.google.com/spreadsheets/d/1WxDaxD5az6kdOjJncmGph37z0BPNhV1fNAH_g7IkpC0/edit#gid=0" %>%
gs_url() %>%
gs_read()
house_popular_vote_tracker_2018 <- "https://docs.google.com/spreadsheets/d/1WxDaxD5az6kdOjJncmGph37z0BPNhV1fNAH_g7IkpC0/edit#gid=0" %>%
gs_url() %>%
gs_read()
View(house_popular_vote_tracker_2018)
house_popular_vote_tracker_2018 <- house_popular_vote_tracker_2018 %>%
slice(-c(1:2))
house_popular_vote_tracker_2018 <- house_popular_vote_tracker_2018 %>%
slice(-c(1:2)) %>%
janitor::clean_names()
house_popular_vote_tracker_2018 <- "https://docs.google.com/spreadsheets/d/1WxDaxD5az6kdOjJncmGph37z0BPNhV1fNAH_g7IkpC0/edit#gid=0" %>%
gs_url() %>%
gs_read()
house_popular_vote_tracker_2018 <- house_popular_vote_tracker_2018 %>%
slice(-c(1:2)) %>%
janitor::clean_names()
saveRDS(house_popular_vote_tracker_2018, file = "../data/house_popular_vote_tracker_2018.RData")
library(here)
getwd()
getwd()
library(here)
library(here)
dr_here()
source('~/Dropbox (Sydney Uni)/midterms_ussc/election/R/popular_vote_tracker.R', echo=TRUE)
source('~/Dropbox (Sydney Uni)/midterms_ussc/election/R/aggregate.R', echo=TRUE)
here()
library(tidyverse)
setwd("~/dropboxsydneyuni/rpackages/ussc")
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
comment = FALSE,
echo = FALSE
)
library(tidyverse)
library(ussc)
ggplot(iris, aes(Sepal.Width, Sepal.Length, colour = Species)) +
#geom_point(size = 4, alpha = 0.3) +
theme_ussc() +
#theme(panel.grid.minor = element_blank()) +
labs(title="Univers Header",
subtitle = "Univers Light subtitle",
x="Univers Font: Sepal Width",
y="Univers Font: Sepal Length",
caption = "Source: the data are from the Iris R package.") +
scale_colour_ussc("main") +
annotate("text", x = 3.4, y = 8.3, label = "Title - font size: 14, font face: bold, font colour: #444444\nSubtitle - font size: 11, font colour: #444444", colour = "purple") +
geom_curve(aes(x = 2.6, y  = 8.2, xend = 2.3, yend = 8.4),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 2.3, y = 7.2, label = "Axis - title & text font size: 11,\nfont colour: #444444\ntick colour: #D3D3D3", colour = "purple") +
geom_curve(aes(x = 2.2, y  = 7.7, xend = 1.9, yend = 8),
curvature = 0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 4.2, y = 7.4, label = "Grid lines - \ncolour: #EBEBEB,\nmajor grid line = 0.5pt,\nminor gridline = 0.25pt", colour = "purple") +
geom_curve(aes(x = 3.8, y  = 7.3, xend = 3.53, yend = 7.95),
curvature = 0.2,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
geom_curve(aes(x = 3.8, y  = 7, xend = 3.4, yend = 7.45),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 6.1, label = "Legend - title size 10,\ntitle font face: bold, title font type:\nUnivers, text colour: #444444,\nkey size: 10 pt, text size: 11, \ntext font type: Univers Light", colour = "purple") +
geom_curve(aes(x = 4.4, y  = 6.7, xend = 4.65, yend = 6.7),
curvature = 0,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 4.5, label = "Caption - font size: 10, \nfont type: Univers Light", colour = "purple")  +
geom_curve(aes(x = 4.45, y  = 4.3, xend = 4.55, yend = 4.2),
curvature = -0.3,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")
ggplot(iris, aes(Sepal.Width, Sepal.Length, colour = Species)) +
geom_point(size = 4, alpha = 0) +
theme_ussc() +
#theme(panel.grid.minor = element_blank()) +
labs(title="Univers Header",
subtitle = "Univers Light subtitle",
x="Univers Font: Sepal Width",
y="Univers Font: Sepal Length",
caption = "Source: the data are from the Iris R package.") +
scale_colour_ussc("main") +
annotate("text", x = 3.4, y = 8.3, label = "Title - font size: 14, font face: bold, font colour: #444444\nSubtitle - font size: 11, font colour: #444444", colour = "purple") +
geom_curve(aes(x = 2.6, y  = 8.2, xend = 2.3, yend = 8.4),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 2.3, y = 7.2, label = "Axis - title & text font size: 11,\nfont colour: #444444\ntick colour: #D3D3D3", colour = "purple") +
geom_curve(aes(x = 2.2, y  = 7.7, xend = 1.9, yend = 8),
curvature = 0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 4.2, y = 7.4, label = "Grid lines - \ncolour: #EBEBEB,\nmajor grid line = 0.5pt,\nminor gridline = 0.25pt", colour = "purple") +
geom_curve(aes(x = 3.8, y  = 7.3, xend = 3.53, yend = 7.95),
curvature = 0.2,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
geom_curve(aes(x = 3.8, y  = 7, xend = 3.4, yend = 7.45),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 6.1, label = "Legend - title size 10,\ntitle font face: bold, title font type:\nUnivers, text colour: #444444,\nkey size: 10 pt, text size: 11, \ntext font type: Univers Light", colour = "purple") +
geom_curve(aes(x = 4.4, y  = 6.7, xend = 4.65, yend = 6.7),
curvature = 0,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 4.5, label = "Caption - font size: 10, \nfont type: Univers Light", colour = "purple")  +
geom_curve(aes(x = 4.45, y  = 4.3, xend = 4.55, yend = 4.2),
curvature = -0.3,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")
ggplot(iris, aes(Sepal.Width, Sepal.Length, colour = Species)) +
geom_point(size = 4, alpha = 0) +
theme_ussc() +
#theme(panel.grid.minor = element_blank()) +
labs(title="Univers Header",
subtitle = "Univers Light subtitle",
x="Univers Font: Sepal Width",
y="Univers Font: Sepal Length",
caption = "Source: the data are from the Iris R package.") +
scale_colour_ussc("main") +
annotate("text", x = 3.4, y = 8.3, label = "Title - font size: 14, font face: bold, font colour: #444444\nSubtitle - font size: 11, font colour: #444444", colour = "purple") +
geom_curve(aes(x = 2.6, y  = 8.2, xend = 2.3, yend = 8.4),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 2.3, y = 7.2, label = "Axis - title & text font size: 11,\nfont colour: #444444\ntick colour: #D3D3D3", colour = "purple") +
geom_curve(aes(x = 2.2, y  = 7.7, xend = 1.9, yend = 8),
curvature = 0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 2.2, y = 2.4, label = "Grid lines - \ncolour: #EBEBEB,\nmajor grid line = 0.5pt,\nminor gridline = 0.25pt", colour = "purple") +
geom_curve(aes(x = 1.8, y  = 1.3, xend = 2.53, yend = 2.95),
curvature = 0.2,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
geom_curve(aes(x = 1.8, y  = 2, xend = 1.4, yend = 2.45),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 6.1, label = "Legend - title size 10,\ntitle font face: bold, title font type:\nUnivers, text colour: #444444,\nkey size: 10 pt, text size: 11, \ntext font type: Univers Light", colour = "purple") +
geom_curve(aes(x = 4.4, y  = 6.7, xend = 4.65, yend = 6.7),
curvature = 0,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 4.5, label = "Caption - font size: 10, \nfont type: Univers Light", colour = "purple")  +
geom_curve(aes(x = 4.45, y  = 4.3, xend = 4.55, yend = 4.2),
curvature = -0.3,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")
ggplot(iris, aes(Sepal.Width, Sepal.Length, colour = Species)) +
geom_point(size = 4, alpha = 0.3) +
theme_ussc() +
#theme(panel.grid.minor = element_blank()) +
labs(title="Univers Header",
subtitle = "Univers Light subtitle",
x="Univers Font: Sepal Width",
y="Univers Font: Sepal Length",
caption = "Source: the data are from the Iris R package.") +
scale_colour_ussc("main") +
annotate("text", x = 3.4, y = 8.3, label = "Title - font size: 14, font face: bold, font colour: #444444\nSubtitle - font size: 11, font colour: #444444", colour = "purple") +
geom_curve(aes(x = 2.6, y  = 8.2, xend = 2.3, yend = 8.4),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 2.3, y = 7.2, label = "Axis - title & text font size: 11,\nfont colour: #444444\ntick colour: #D3D3D3", colour = "purple") +
geom_curve(aes(x = 2.2, y  = 7.7, xend = 1.9, yend = 8),
curvature = 0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple") +
annotate("text", x = 4.2, y = 7.4, label = "Grid lines - \ncolour: #EBEBEB,\nmajor grid line = 0.5pt,\nminor gridline = 0.25pt", colour = "purple") +
geom_curve(aes(x = 3.8, y  = 7.3, xend = 3.53, yend = 7.95),
curvature = 0.2,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
geom_curve(aes(x = 3.8, y  = 7, xend = 3.4, yend = 7.45),
curvature = -0.4,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 6.1, label = "Legend - title size 10,\ntitle font face: bold, title font type:\nUnivers, text colour: #444444,\nkey size: 10 pt, text size: 11, \ntext font type: Univers Light", colour = "purple") +
geom_curve(aes(x = 4.4, y  = 6.7, xend = 4.65, yend = 6.7),
curvature = 0,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")+
annotate("text", x = 4, y = 4.5, label = "Caption - font size: 10, \nfont type: Univers Light", colour = "purple")  +
geom_curve(aes(x = 4.45, y  = 4.3, xend = 4.55, yend = 4.2),
curvature = -0.3,
arrow = arrow(length = unit(0.03, "npc")),
colour = "purple")
pkgdown::clean_site()
pkgdown::build_site
pkgdown::build_site()
